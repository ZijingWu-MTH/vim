# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:int}> v${2};
snippet forv
	for (auto it = ${1:var}.begin(); it != $1.end(); it++)
	{
		${3:/* code */}
	}
snippet fors
	for (auto it = ${1:var}.begin(); it != $1.end(); it++) 
	{
		${3:/* code */}
	}
snippet form
	for (auto it = ${1:var}.begin(), it ! = $1.end(); it++)
	{
		// it->first.f();
	}
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# forward class decalaration
snippet fc
	class ${1:name};
# Class
# will conflict with snippet in objc for objective-c++
snippet dcl C++ class #2
	class ${1:`Filename('$1', 'name')`} : public ${2:base} {
	public:
		$1 (${3:arguments}){};
		virtual ~$1 (){};
	
	private:
		${4:/* data */}
	};

snippet cl C++ class #2
	class ${1:`Filename('$1', 'name')`} {
	public:
		$1 (${2:arguments}){};
		virtual ~$1 (){};
	
	private:
		${3:/* data */}
	};

snippet debugreturn
	int tmp${1:`RandomChoose(1000)`}=0; if (tmp$1==0) { return; }

snippet try
	try
	{
	}
	catch(Exception e)
	{
	}
snippet tryf
	try
	{
	}
	catch(Exception e)
	{
	}
	finally
	{
	}
